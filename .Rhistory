source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
ls()
ls.str
setmatrix <- matrix(data=5, nr=2, nc=2)
matrix(data=5, nr=2, nc=2)
solve(setmatrix)
setmatrix <- matrix(data=5, nr=2, nc=2)setmatrix()
solve(setmatrix)
solve(matrix(data=5, nr=2, nc=2))
?"NULL"
## Put comments here that give an overall description of what your
## functions do
##OVERALL, MY FUNCTIONS CACHE THE INVERSE OF A MATRIX.
## Write a short comment describing this function
##THIS FUNCTION CREATES A SPECIAL "MATRIX" OBJECT THAT CAN CACHE ITS INVERSE
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set <- function (y) {
x <<- y
m<<- NULL
}
get <- function () x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
##THIS FUNCTION COMPUTES THE INVERSE OF THE SPECIAL "MATRIX" RETURNED BY
##makeCacheMatrix. IF THE INVERSE HAS ALREADY BEEN CALCULATED AND THE MATRIX
##HAS NOT BEEN CHANGED, THEN THE cachesolve SHOULD RETRIEVE THE INVERSE FROM
##THE CACHE.
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$getmatrix(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set <- function (y) {
x <<- y
m<<- NULL
}
get <- function () x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$getmatrix(m)
m
}
